#include"SeqList.h"

//顺序表初始化
void InitSeqList(PSeqList ps)
{
	assert(ps);
	ps->data = (DataType*)malloc(sizeof(DataType)*4);
	if (ps->data == NULL)
	{
		perror("InitSeqList:");
		return;
	}
	ps->capacity = 3;
	ps->sz = 0;
	printf("初始化成功！\n");
}

//顺序表关闭
void DestroySeqList(PSeqList ps)
{
	assert(ps);
	free(ps->data);
	ps->data = NULL;
	ps->capacity = 0;
	ps->sz = 0;
	printf("顺序表已销毁！\n");
}

void CheckCapacity(PSeqList ps)
{
	assert(ps);
	if (ps->sz == ps->capacity)
	{
		DataType* ptr = (DataType*)malloc(2 * sizeof(ps->capacity));
		if (ptr != NULL)
		{
			memcpy(ptr, ps->data, ps->sz*sizeof(ps->data));
			ps->data = ptr;
			free(ptr);
			ptr = NULL;
			ps->capacity *= 2;
		}
		
	}
}

//尾插
void SeqListPushBack(PSeqList ps, DataType data)
{
	assert(ps);
	CheckCapacity(ps);
	ps->data[ps->sz] = data;
	ps->sz++;
	printf("尾插完成！\n");
}

//尾删
void SeqListPopBack(PSeqList ps)
{
	assert(ps);
	ps->sz--;
	printf("尾删完成！\n");
}

//头插
void SeqListPushFront(PSeqList ps, DataType data)
{
	assert(ps);
	CheckCapacity(ps);
	int i = ps->sz;
	for (i; i > 0; i--)
	{
		ps->data[i] = ps->data[i - 1];
	}
	ps->data[0] = data;
	ps->sz++;
	printf("头插完成！\n");
}

//头删
void SeqListPopFront(PSeqList ps)
{
	assert(ps);
	int i = 0;
	for (i = 0; i < ps->sz - 1; i++)
	{
		ps->data[i] = ps->data[i + 1];
	}
	ps->sz--;
	printf("头删完成！\n");
}

//任意位置插入
void SeqListInsert(PSeqList ps, int pos, DataType data)
{
	assert(ps);
	//CheckCapacity(ps);
	int i = ps->sz;
	for (i; i > pos; i--)
	{
		ps->data[i] = ps->data[i - 1];
	}
	ps->data[pos] = data;
	ps->sz++;
	printf("任意位置插入完成！\n");
}

//任意位置删除
void SeqListErase(PSeqList ps, int pos)
{
	assert(ps);
	int i = pos;
	for (i; i < ps->sz - 1; i++)
	{
		ps->data[i] = ps->data[i + 1];
	}
	ps->sz--;
	printf("任意位置删除完成！\n");
}

// 检测data是否在顺序表中 
int SeqListFind(PSeqList ps, DataType data)
{
	assert(ps);
	int i = 0;
	for (i = 0; i < ps->sz; i++)
	{
		if (ps->data[i] == data)
			return i;
	}
	return -1;
}

// 移除顺序表中第一个值为data的元素
void SeqListRemove(PSeqList ps, DataType data)
{
	assert(ps);
	int i = 0;
	int j = -1;
	for (i = 0; i < ps->sz; i++)
	{
		if (ps->data[i] == data)
			j = i;
	}
	if (j != -1)
	{
		for (j; j < ps->sz - 1; j++)
		{
			ps->data[j] = ps->data[j + 1];
		}
	}
	ps->sz--;
}

// 移除顺序表中所有值为data的元素
void SeqListRemoveAll(PSeqList ps, DataType data)
{
	assert(ps);
	int i = 0;
	for (i = 0; i < ps->sz; i++)
	{
		if (ps->data[i] == data)
		{
			int j = i;
			for (j; j < ps->sz - 1; j++)
			{
				ps->data[j] = ps->data[j + 1];
			}
			ps->sz--;
			i--;
		}
	}
}

// 获取顺序表有效元素个数
int SeqListSize(PSeqList ps)
{
	assert(ps);
	return ps->sz;
}

// 获取顺序表的容量
int SeqListCapacity(PSeqList ps)
{
	assert(ps);
	return ps->capacity;
}

// 检测顺序表是否为空
int SeqListEmpty(PSeqList ps)
{
	assert(ps);
	if (ps->sz == 0)
	{
		return 0;
	}
	else
		return ps->sz;
}

// 获取顺序表中第一个元素 
DataType SeqListFront(PSeqList ps)
{
	assert(ps);
	if (ps->sz == 0)
	{
		return 0;
	}
	else
		return ps->data[0];
}

// 获取顺序表中最后一个元素
DataType SeqListBack(PSeqList ps)
{
	assert(ps);
	if (ps->sz == 0)
	{
		return 0;
	}
	else
		return ps->data[ps->sz];
}

//显示顺序表内容
void PrintSeqList(PSeqList ps)
{
	assert(ps);
	int i = 0;
	for (i = 0; i < ps->sz; i++)
	{
		printf("%d ", ps->data[i]);
	}
	printf("\n");
}