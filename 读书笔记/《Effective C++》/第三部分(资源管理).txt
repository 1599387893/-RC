							三		资源管理


条款13：“以对象管理资源”(Use objects to manage resources.)
	*
	*为防止资源泄露，请使用RAII对象，他们在构造函数中获得资源并在析构函数中释放资源；
	*两个常被使用的RAII classes分别是shared_ptr和auto_ptr。前者通常为较佳选择，因为其COPY行为比较直观，复制动作会使它指向null；
	*
	1.把资源放进对象中，我们便可以依赖C++的“析构函数自动调用机制”确保资源内释放；
	2.RAII----“资源取得时机就是初始化时机(Resource Acquisition Is Initialization; RAII)”
	
	
条款14：“在资源管理类中小心Copying行为”(Think carefully about copying bahavior in resources-managing classes.)
	*
	*复制RAII对象必须一并复制它所管理的资源，所以资源的 copying行为决定RAII对象的copying行为
	*普遍而常见的RAII class copying行为是： 抑制copying，施行引用计数法(reference couting).不过其他行为也可能被实现
	*
	1.当一个RAII对象被复制，可选择以下操作：
		a.禁止复制
		b.对于所管理的底层资源使用“引用计数法”


条款15：“在资源管理类中提供对原始资源的访问”(Provide access to raw resources in resource-mamnging classes.)
	*
	*APIs往往要求访问原始资源(raw resource)，所以每一个RAII class应该提供一个“取得其所管理的资源”的方法；
	*对原始资源的访问可能经由显式转换或隐式转换。一般而言显示转换比较安全，但隐式转换对客户比较方便。
	*
	1.将一个RAII class对象转换为其所包含的原始资源，有两种方法：（显式转换和隐式转换）
		a.显式转换：可以在RAII class内提供一个函数(get()函数)，返回RAII对象内部的原始指针；
		b.隐式转换：重载操作符(operator->()和operator*())，也可以重载其他的操作符。

条款16：“成对使用new和delete时要采用相同形式”(Use th same form in corresponding uses of new and detele.)
	*
	*如果在new表达式中使用[]，必须在相应的delete表达式中也使用[]。
	*如果你在new表达式中不使用[]，一定不要再相应的delete表达式中使用[]。
	*
	

条款17:“以独立语句将newed对象置入智能指针”(Store newed objects in smart pointers in standalone statements.)
	*
	*以独立语句将newed对象存储于(置入)智能指针内。如果不这样做，一旦一场被抛出，有可能导致难以察觉的资源泄露。
	*
	1.shared_ptr智能指针构造函数需要要一个原始指针(raw pointer)，该构造函数函数是个explicit构造函数，无法进行隐式转换。
	2.在“资源被创建”和“资源被转换为资源管理对象”两个时间点之间又可能发生异常(比如：直接在调用函数的位置，传入刚申请的内存)，那么就会造成内存泄漏：
		为了防止这类问题的发生，需要使用分离语句。明确的将资源传递给智能指针。