《大话设计模式》读书笔记（6）
								穿什么有这么重要？----装饰模式
								
								
	1. 装饰模式（Decorator）：动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。（需要把所需的功能按照正确的顺序窗帘起来进行控制）；
		* Component是抽象控件，定义一个对象接口，就可以给这些对象动态的添加职责；
		* ConreteComponent定义一个具体对象，也可以给这个对象添加一些职责；
		* Decorator是装饰抽象类，实现接口或者抽象方法(继承Component)；
		* ConreteDecorator是具体装饰对象，起到给Component添加职责的功能；
	2. 装饰模式就是为已有功能动态的增加更多功能的一种方式；
	3. 理解：类似于穿衣服，最开始有一个person类(Component类或者ConcreteComponent类)，使用服饰类(Decorator类/装饰抽象类)继承这个person类，针对不同类型的衣服进行继承，最终在逻辑代码中进行对象的组合继承。在Decrator类中构造函数参数是使用Person类型进行接收，这样才能保证最终的具体服饰类可以进行相互的构造（装饰）。
	4.装饰模式的引用场景：在不想增加很多子类的情况下扩展类
		* 扩展一个类的功能；
		* 动态的增加功能，动态撤销



