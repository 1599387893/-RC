/*
【题目描述】妞妞公主新得到了一块黑白棋盘。这块棋盘共有 n 行 m 列，任意相邻的两个格子都是不同的
颜色（黑或白），坐标为(1,1)的格子是白色的。
这一天牛牛来看妞妞公主时，妞妞公主正望着这块棋盘发呆。牛牛看妞妞公主闷闷不乐的样子，便对妞妞
公主说：“只要你告诉我 n 和 m，我能马上算出黑色方块和白色方块的数量。”
“这太简单了。”妞妞公主想了一会儿，“我会在这 n 行 m 列中选择一个左下角坐标为(x0,y0)。右上角坐标
为（x1,y1）的矩形，把这个矩形里的共（x1-x0+1）*(y1-y0+1)个方块全部涂白。你还能马上算出黑色方
块和白色方块的数量吗？”
“这太简单了。”牛牛自信一笑，“你可以在执行涂白操作后再选一个左下角坐标为（x2,y2），右上角坐标
为(x3,y3)的矩形，把这个矩形里的方块全部涂黑。我依然能马上算出黑色方块和白色方块的数量。”
妞妞公主终于惊讶地睁大了眼，于是抛出了她的 T 次提问。
聪明的牛牛当然会做了，但是他想把这个问题交给你，请帮牛牛算出每次提问棋盘的黑白方块数目吧。
*/

/*
输入描述:
第一行一个整数 T，表示妞妞公主一共提问了 T 次。
接下来 3*T 行，
第（1+3*i）行两个整数 n，m。表示第 i 次提问时棋盘的大小；
第（2+3*i）行四个整数 x0，y0，x1，y1。表示第 i 次提问时涂白操作选取的两个坐标。
第（3+3*i）行四个整数 x2，y2，x3，y3。表示第 i 次提问时涂黑操作选取的两个坐标。
1<=T<=10000，1<=x<=n<=1000000000，1<=y<=m<=1000000000，x0<=x1，y0<=y1，x2<=x3，y2<=y3。
*/

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

int main()
{
	vector<int> x(8),y(8);
	//vector<int> y(8);
	int t;//输入的次数
	int n, m;//棋盘的大小
	int b_count, w_count;//黑白棋格个数
	int a, b, c, d, e;//
	
	cin >> t;
	while (t--)
	{
		cin >> n >> m;
		b_count = n*m / 2;
		w_count = n*m - b_count;
		for (int i = 0; i <= 3; ++i)
			cin >> x[i] >> y[i];
		
		//x0,y0与x1,y1
		if ((x[0] + y[0]) & 1)
			d = ((x[1] - x[0] + 1) * (y[1] - y[0] + 1) + 1) / 2;
		else
			d = (x[1] - x[0] + 1) * (y[1] - y[0] + 1) / 2;
		w_count += d;
		b_count -= d;

		//x2,y2与x3,y3
		if ((x[2] + y[2]) & 1)
			d = ((x[3] - x[2] + 1) * (y[3] - y[2] + 1) + 1) / 2;
		else
			d = (x[3] - x[2] + 1) * (y[3] - y[2] + 1) / 2;
		w_count -= d;
		b_count += d;

		a = max(x[0], x[2]);
		b = max(y[0], y[2]);
		c = max(x[1], x[3]);
		d = max(y[1], y[3]);

		if (c < a || d < b)
			e = 0;
		else
		{
			if ((a + b) & 1)
				e = ((c - a + 1)*(d - b + 1) + 1) / 2;
			else
				e = (c - a + 1)*(d - b + 1) / 2;
		}

		w_count -= e;
		b_count += e;
		cout << w_count << " " << b_count << endl;
	}
	return 0;
}